---
title: "BeeMarkdown"
author: "Kap (and jem?)"
date: "2024-03-07"
output: html_document
---

# Checks system for installed packages and installs/activates them.

```{r setup, echo=FALSE}
# List of packages we need
req_pkgs <- c("ggplot2", "ggpmisc", "rstudioapi", "tidyverse")

# Check if they're here, install if they're not
# for (pkg in req_pkgs){
#   # require attempts to load pkg and returns T/F if it can or can't
#   # so if R could NOT load pkg, it'll install it and load it
#   # character.only indicates that pkg is a "string"
#   if(!require(pkg, character.only = TRUE)){
#     # installs pkg + its dependencies
#     install.packages(pkg, dependencies = TRUE)
#     library(pkg, character.only = TRUE)
#   }
# }

# alternatively, skip to loading all of them because you know you have those
lapply(req_pkgs, library, character.only=TRUE)
# toss it from the environment
rm(req_pkgs)
```

# Setting up the workspace

```{r, warning=FALSE}
# csv to data frame
# qmd and rmd files have their wd as their home folder by default
# so back out and go into data to find the csv like ../data/csv
# beeData <-  read.csv("../data/processed/BeeDataNoiNatBio_PPTCWE.csv")

# but my directory isn't right for some reason, so this'll be fine for now
# go to where the target csv is
setwd(selectDirectory())
# import it as dataframe
beeData <- read.csv("BeeDataNoiNatBio_PPTCWE.csv")
```

# Graphing Bee Data with Climate Data from climateengine.org

### Species Richness by Average Spring Precipitation (March-October)

```{r richness_ppt, echo=FALSE}
ggplot(data = beeData, aes(x = PPT, y = X_RICHNESS_ALL_)) + 
  geom_point(color = "black", pch = 21) + 
  geom_smooth(method = "lm", formula = y ~ poly(x,2),
              se = FALSE, color = "maroon") + 
  labs (
    title = "Species Richness and Average Spring Precipitation", 
    subtitle = "per 15 km cells across California",
    x = "Average Precipitation (mm)",
    y = "Species Richness (# of species per cell)")
```

### Corrected Weighted Endemism by Average Spring Precipitation (March-October)

```{r cwe_ppt, echo=FALSE}
ggplot(data = beeData, aes(x = PPT, y = CWE)) + 
  geom_point(color = "black", pch = 21) + 
  geom_smooth(method = "lm", se = FALSE, color = "maroon") + 
  labs (
    title = "Corrected Weighted Endemism and Average Spring Precipitation", 
    subtitle = "Per 15 km cells across California" 
  ) + 
  ylab("Corrected Weighted Endimism (CWE)") + 
  xlab("Average Precipitation (mm)")
```

# Playing with bioclim files

```{r, warning=FALSE}
setwd(selectDirectory())
ca_bioclim <- read.csv("california_bioclim.csv")
```

## Plotting CWE and richness by different bio variables

Note: when I started working, I got a bunch of warnings because ggplot had to remove non-finite values. NAs. I cleaned the set like this to make those go away:\

```{r cleaning_bioclim, echo=FALSE}
# specifying the columns I care about
aoi <- c("X_ENDC_CWE_","X_ENDC_RICHNESS_","bio1","bio11","bio12","bio13","bio14")

biocleaned <- ca_bioclim |> 
  # include a row...
  filter(
    # IF the given logical function .fns is true in the cols
    # (there's if_any that picks a row if any are true)
    # (but we want the rows where all are true/none are NA)
    if_all(.cols = all_of(aoi),
           # can't just say !is.na bc that's a condition not a fn
           # so we use shorthand for an anonymous function
           # instead of function(x){!is.na(x)}
           # . refers to current column being processed
           .fns = ~!is.na(.)))
```

### Bio 1. Mean Annual Temperature (°C \* 10).

```{r cwe_temp, echo=FALSE}
ggplot(biocleaned, aes(x = bio1, y = X_ENDC_CWE_)) +
  geom_point(color = "black", pch = 21) +
  geom_smooth(method = "lm", se = FALSE) +
  stat_poly_eq(aes(label = paste(after_stat(eq.label), "*','*~", after_stat(rr.label))),
               label.x = 'left', label.y = 0.4,
               formula = y ~ x, parse = TRUE) +
  labs(title = "Corrected Weighted Endemism and Mean Annual Temperature",
       subtitle = "Per 15 km cells across California",
       y = "Endemic species weighted by range size",
       x = "Annual Mean Temperature (°C * 10)") +
  theme_minimal()
```

```{r richness_temp, echo=FALSE}
# keeping this here because I figured it out for this one and worked backward lol
ggplot(biocleaned, aes(x = bio1, y = X_ENDC_RICHNESS_)) +
  geom_point(color = "black", pch = 21) +
  geom_smooth(method = "lm", se = FALSE) +
  # stat_poly_eq is in ggpmisc
  # aes to set the text of the label
  # eq.label is generated by stat_poly representing the line of best fit
  # rr.label is the r-squared value
  # so after_stat refers to the variables created by stat_poly
  # sep=" " by default, so no need to specify; whitespace ignored when parsed
  stat_poly_eq(aes(label = paste(after_stat(eq.label), "*','*~", after_stat(rr.label))),
               # x and y positioning of the label
               label.x = 'left', label.y = 0.6, 
               # the formula has to match the line generated, i think it does by default, but-
               # parse=TRUE is why that weird *','*~ is in the paste function
               # the * is how you concatenate text in math expressions
               # the ' identifies the comma as text
               # another * to stick it to the ~, which is read as a space once parsed
               formula = y ~ x, parse = TRUE) +
  labs(title = "Species Richness and Mean Annual Temperature",
       subtitle = "Per 15 km cells across California",
       y = "Number of endemic species",
       x = "Annual Mean Temperature (°C * 10)") +
  theme_minimal()
```

#### Plotting function

Since I don't want to paste the same chunk over and over and over—

```{r}
plot_this <- function(xvar, xlab, yvar){
  ggplot(biocleaned, aes_string(x = xvar, y = yvar)) +
    geom_point(color = 'black', pch = 21) +
    geom_smooth(method = 'lm', se = FALSE, formula = y ~ x) +
    stat_poly_eq(aes(label = paste(after_stat(eq.label),"*','*~",after_stat(rr.label))),
                 label.x = 'left', label.y = 'top', parse = TRUE) +
    labs(title = paste(ifelse(yvar == 'X_ENDC_CWE_',
                              "Corrected Weighted Endemism",
                              "Species Richness"),
                       "and", xlab),
         subtitle = 'per 15km cells across California',
         x = xlab,
         y = ifelse(yvar == 'X_ENDC_CWE_',
                    'Endemic species weighted by range size',
                    'Number of endemic species')) +
    theme_classic()
}

responses <- c('X_ENDC_CWE_','X_ENDC_RICHNESS_')
```

### Bio 11. Mean Temperature of Coldest Quarter.

```{r, echo=FALSE}

for (yvar in responses){
  print(plot_this('bio11','Mean Temperature of Coldest Quarter (ºC)', yvar))
}
```

### Bio 12. Annual precipitation.

```{r}
for (yvar in responses){
  print(plot_this('bio12','Annual precipitation (mm)', yvar))
}
```

### Bio 13. Precipitation of wettest month.

```{r}
for (yvar in responses){
  print(plot_this('bio13','Precipiation of wettest month (mm)', yvar))
}
```

### Bio 14. Precipitation of driest month.

```{r}
for (yvar in responses){
  print(plot_this('bio14','Precipiation of driest month (mm)', yvar))
}
```

```{r}
# paste0 is paste with sep="" by default. it collapses.
predictors <-  paste0('bio',1:19)
formula <- as.formula(paste("X_ENDC_CWE_ ~", paste(predictors, collapse = " + ")))

cwe_model <- lm(formula, data = biocleaned)
summary(cwe_model)

```
